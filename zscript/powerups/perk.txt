class PNP_PowerPerk : PNP_Power {
	int rolls;
	StateLabel result;
	
	Default {
		Inventory.PickUpMessage "Perk-a-Cola! What will you get...?";
	}
	
	States {
		Spawn:
			ZPOW B 0;
			Goto Super::Spawn;
			
		Pickup:
			#### # 5;
			#### # 0 A_ShufflePerk;
			Loop;
			
		Result:
			#### # 105 {
				StateLabel st = invoker.result;
				let who = invoker.target;
				
				if (st == "TeddyBear") {
					if (who) {
						who.A_Log("Better luck next time...", true);
						who.A_TakeInventory("PNP_ITouchedPerkACola");
					}
					
					A_StartSound("PNP_Perk/laugh", CHAN_VOICE, CHANF_OVERLAP, 1, 0.4);
					SetStateLabel("Unlucky");
					
					return;
				}
				
				if (!who) {
					return;
				}
				
				Sound snd;
				string msg;
				class<Inventory> gimme;
				
				if (st == "DoubleTap") {
					snd = "PNP_Perk/doubletap";
					msg = "Double Tap Root Beer II! Faster and sharper bullets.";
					gimme = "PNP_PerkDoubleTap";
				} else if (st == "Juggernog") {
					snd = "PNP_Perk/juggernog";
					msg = "Juggernog! Increased damage resistance.";
					gimme = "PNP_PerkJuggernog";
				} else if (st == "QuickRevive") {
					snd = "PNP_Perk/quickrevive";
					msg = "Quick Revive! Autoheal and second chance.";
					gimme = "PNP_PerkQuickRevive";
				} else if (st == "SpeedCola") {
					snd = "PNP_Perk/speedcola";
					msg = "Speed Cola! Instant weapon equipping.";
					gimme = "PNP_PerkSpeedCola";
				} else if (st == "WidowsWine") {
					snd = "PNP_Perk/widowswine";
					msg = "Widow's Wine! Web explosions when damaged.";
					gimme = "PNP_PerkWidowsWine";
				} else if (st == "StaminUp") {
					snd = "PNP_Perk/staminup";
					msg = "Stamin-Up! Increased movement speed.";
					gimme = "PNP_PerkStaminUp";
				} else if (st == "PHDFlopper") {
					snd = "PNP_Perk/phdflopper";
					msg = "PHD Flopper! Explosion immunity and explosive falls.";
					gimme = "PNP_PerkPHDFlopper";
				}
				
				who.A_StartSound(snd, CHAN_VOICE, CHANF_OVERLAP | CHANF_LOCAL | CHANF_UI, 1, ATTN_NONE);
				who.A_Log(msg, true);
				who.A_GiveInventory(gimme);
				who.A_TakeInventory("PNP_ITouchedPerkACola");
			}
			
			#### # 1 A_FadeOut(0.08);
			Wait;
			
		Unlucky:
			#### # 170;
			#### # 0 A_StartSound("PNP_Perk/bye", CHAN_VOICE, CHANF_OVERLAP, 1, 0.4);
			#### # 1 A_FadeOut(0.08);
			Wait;
			
		DoubleTap:
			ZPER D 0;
			Goto Pickup;
			
		Juggernog:
			ZPER A 0;
			Goto Pickup;
			
		QuickRevive:
			ZPER C 0;
			Goto Pickup;
			
		SpeedCola:
			ZPER B 0;
			Goto Pickup;
			
		WidowsWine:
			ZPER E 0;
			Goto Pickup;
			
		StaminUp:
			ZPER F 0;
			Goto Pickup;
			
		TeddyBear:
			ZPER G 0;
			Goto Pickup;
		
		PHDFlopper:
			ZPER H 0;
			Goto Pickup;
	}
	
	override bool TryPickup(in out Actor toucher) {
		if (target) {
			return false;
		}
		
		let touchy = toucher.FindInventory("PNP_ITouchedPerkACola");
		
		if (touchy && touchy.target) {
			return false;
		}
		
		int i;
		Inventory item = toucher.inv;
		
		while (item != null) {
			if (item is "PNP_Perk" && ++i >= sv_pnp_maxPerks) {
				toucher.A_Print("You have too many perks!");
				
				return false;
			}
			
			item = item.inv;
		}
		
		A_StartSound("PNP_Perk/roll", CHAN_AUTO, CHANF_DEFAULT, 1, 0.4, 0, 0.25);
		SetStateLabel("Pickup");
		bZDoomTrans = false;
		A_SetRenderStyle(1, STYLE_TRANSLUCENT);
		target = toucher;
		toucher.A_GiveInventory("PNP_ITouchedPerkACola");
		touchy = toucher.FindInventory("PNP_ITouchedPerkACola");
		
		if (touchy) {
			touchy.target = self;
		}
		
		rolls = 35;
		
		return true;
	}
	
	action void A_ShufflePerk() {
		if (invoker.rolls <= 0) {
			SetStateLabel("Result");
			
			return;
		}
		
		StateLabel st;
		string st2;
		
		switch (Random(0, 7)) {
			case 0:	st = "DoubleTap"; st2 = "DoubleTap"; break;
			case 1: st = "Juggernog"; st2 = "Juggernog"; break;
			case 2: st = "QuickRevive"; st2 = "QuickRevive"; break;
			case 3: st = "SpeedCola"; st2 = "SpeedCola"; break;
			case 4: st = "WidowsWine"; st2 = "WidowsWine"; break;
			case 5: st = "StaminUp"; st2 = "StaminUp"; break;
			case 6: st = "TeddyBear"; st2 = "TeddyBear"; break;
			case 7: st = "PHDFlopper"; st2 = "PHDFlopper"; break;
		}
		
		if (st != "TeddyBear") {
			let who = invoker.target;
			
			if (who) {
				string className = "PNP_Perk"..st2;
				class<Inventory> cls = className;
				
				if (cls && who.CountInv(cls)) {
					st = "TeddyBear";
				}
			}
		}
		
		SetStateLabel(st);
		invoker.result = st;
		--invoker.rolls;
	}
	
	override void Tick() {
		super.Tick();
		despawnTime = 0;
	}
}

class PNP_ITouchedPerkACola : Inventory {
	Default {
		Inventory.MaxAmount 1;
		
		+Inventory.Undroppable
		+Inventory.Untossable
		+Inventory.AutoActivate
	}
	
	States {
		Use:
			TNT1 A 0;
			Fail;
		
		Pickup:
			TNT1 A 0 {
				return true;
			}
			
			Stop;
	}
}